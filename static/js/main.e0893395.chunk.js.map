{"version":3,"sources":["Nav.js","Projects.js","Contact.js","Resume.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","react_router_dom","to","Projects","id","Array","from","length","key","Contact","href","download","Resume","src","style","width","height","App","className","src_Nav","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAUeA,SAPH,kBACXC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KAAT,UACLJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,YAAT,gBCKQC,EATE,WAChB,IAAIC,EAAK,EACT,OACCN,EAAAC,EAAAC,cAAA,sBACEK,MAAMC,KAAK,CAACC,OAAO,KAAK,kBAAIT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKJ,KAAV,YCOjBK,EAVC,WACf,OACCX,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,WAAT,QACAJ,EAAAC,EAAAC,cAAA,KAAGU,KAAK,aAAaC,UAAU,GAAMb,EAAAC,EAAAC,cAAA,2BCFzBY,EAJA,kBACdd,EAAAC,EAAAC,cAAA,SAAOa,IAAI,aAAaC,MAAO,CAACC,MAAM,OAAOC,OAAO,YCqBtCC,EAhBH,WACV,OACEnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjCL,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWd,IAClCX,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWX,KAEnCd,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,UAAlB,WCNYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e0893395.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Nav = () => (\n\t<nav>\n\t\t<div><Link to=\"/\">Home!</Link></div>\n\t\t<div><Link to=\"/contact\">Contact!</Link></div>\n\t</nav>\n);\n\nexport default Nav;\n","import React from 'react';\n\nconst Projects = () => {\n\tlet id = 1;\n\treturn (\n\t\t<div>projects\n\t\t\t{Array.from({length:100},()=><div key={id++}>test</div>)}\n\t\t</div>\n\t);\n}\n\nexport default Projects;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Contact = () => {\n\treturn (\n\t\t<div>\n\t\t\t<span>resume:</span>\n\t\t\t<Link to=\"/resume\">view</Link>\n\t\t\t<a href='resume.pdf' download={true}><span>download</span></a>\n\t\t</div>\n\t);\n}\n\nexport default Contact;\n","import React from 'react';\n\nconst Resume = () => (\n\t<embed src=\"resume.pdf\" style={{width:'100%',height:'100vh'}}/>\n);\n\nexport default Resume;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Nav from './Nav';\nimport Projects from './Projects';\nimport Contact from './Contact';\nimport Resume from './Resume';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Projects} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/resume\" component={Resume} />\n        </Switch>\n        <footer className=\"footer\">foot</footer>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}