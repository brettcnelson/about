{"version":3,"sources":["Nav.js","Landing.js","Projects.js","Contact.js","Resume.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","react_router_dom","className","activeClassName","exact","to","src","alt","Landing","projects","name","pic","url","code","Projects","map","p","i","key","href","target","rel","style","marginRight","marginLeft","Contact","download","Resume","width","height","App","src_Nav_0","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e21856d2.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Nav.css';\n\nconst Nav = () => {\n\treturn (\n\t\t<nav>\n\t\t\t<NavLink className=\"Link\" activeClassName=\"active\" exact={true} to=\"/\"><img src=\"favicon.ico\" alt=\"\"/></NavLink>\n\t\t\t<NavLink className=\"Link\" activeClassName=\"active\" to=\"/portfolio\"><span>Portfolio</span></NavLink>\n\t\t\t<NavLink className=\"Link\" activeClassName=\"active\" to=\"/contact\"><span>Contact</span></NavLink>\n\t\t\t<NavLink className=\"Link\" activeClassName=\"active\" to=\"/resume\"><span>Resume</span></NavLink>\n\t\t</nav>\n\t);\n}\n\nexport default Nav;\n","import React from 'react';\n// import './Landing.css';\n\nconst Landing = () => {\n\treturn (\n\t\t<p>Landing</p>\n\t);\n}\n\nexport default Landing;","import React from 'react';\nimport './Projects.css';\n\nconst projects = [\n\t{\n\t\tname: 'Fullstack React Boilerplate',\n\t\tpic:'rfsb.png',\n\t\turl:'https://fullstack-react-boilerplate.herokuapp.com/',\n\t\tcode:'https://github.com/brettcnelson/react-fullstack-boilerplate'\n\t},\n\t{\n\t\tname: 'Trivial Conquest',\n\t\tpic:'rfsb.png',\n\t\turl:'https://intense-journey-25938.herokuapp.com',\n\t\tcode:'https://github.com/trivial-conquest/trivial-conquest'\n\t},\n\t{\n\t\tname: 'Dark Sky Weather New Tab Page',\n\t\tpic:'dsnt.jpg',\n\t\turl:'https://chrome.google.com/webstore/detail/weather-widget-new-tab-pa/fecpjkhachlmnblhbmfldinkhfjeckkd',\n\t\tcode:'https://github.com/brettcnelson/dark-sky-new-tab'\n\t},\n\t{\n\t\tname: 'Machine Learning Tic-Tac-Toe',\n\t\tpic:'dsnt.jpg',\n\t\turl:'https://auto-tic.herokuapp.com/',\n\t\tcode:'https://github.com/brettcnelson/auto-tic'\n\t},\n\t{\n\t\tname: 'Sudoku Solver',\n\t\tpic:'dsnt.jpg',\n\t\turl:'https://auto-sudoku.herokuapp.com/',\n\t\tcode:'https://github.com/brettcnelson/sudoku-solver'\n\t}\n];\n\nconst Projects = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1 className=\"phead\">Portfolio</h1>\n\t\t\t<div className=\"projectcon\">\n\t\t\t\t{projects.map((p,i)=><div key={i} className=\"project\">\n\t\t\t\t\t<p>{p.name}</p>\n\t\t\t\t\t<img className=\"projectimg\" src={p.pic} alt=\"\"/>\n\t\t\t\t\t<p className=\"projectlinkscon\">\n\t\t\t\t\t\t<a className=\"links\" href={p.url} target=\"_blank\" rel=\"noopener noreferrer\" style={{marginRight:'1em'}}>url</a>\n\t\t\t\t\t\t<a className=\"links\" href={p.code} target=\"_blank\" rel=\"noopener noreferrer\" style={{marginLeft:'1em'}}><code>code</code></a>\n\t\t\t\t\t</p>\n\t\t\t\t</div>)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Projects;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Contact = () => {\n\treturn (\n\t\t<div>\n\t\t\t<p>resume :</p>\n\t\t\t<Link to=\"/resume\">view</Link>\n\t\t\t<a href='resume.pdf' download={true}><span>download</span></a>\n\t\t</div>\n\t);\n}\n\nexport default Contact;\n","import React from 'react';\n\nconst Resume = () => (\n\t<embed src=\"resume.pdf\" style={{width:'100%',height:'100vh'}}/>\n);\n\nexport default Resume;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Nav from './Nav';\nimport Landing from './Landing';\nimport Projects from './Projects';\nimport Contact from './Contact';\nimport Resume from './Resume';\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route path=\"/portfolio\" component={Projects} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/resume\" component={Resume} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}